import eslint from "@eslint/js";
import stylistic from "@stylistic/eslint-plugin";
import globals from "globals";

export default [
    eslint.configs.recommended,
    {
        languageOptions: {
            sourceType: "module",
            globals: {
                ...globals.browser,
            },
        },
        plugins: {
            "@stylistic": stylistic,
        },
        ignores: [
            "eslint.config.mjs",
            "stylelint.config.mjs",
        ],
        rules: {
            "@stylistic/array-bracket-spacing": ["error", "never"],
            "@stylistic/arrow-spacing": "error",
            "@stylistic/block-spacing": "error",
            "@stylistic/brace-style": "error",
            "@stylistic/comma-dangle": ["error", "always-multiline"],
            "@stylistic/comma-spacing": "error",
            "@stylistic/eol-last": ["error", "always"],
            "@stylistic/func-call-spacing": ["error", "never"],
            "@stylistic/indent": ["error", 4],
            "@stylistic/key-spacing": "error",
            "@stylistic/keyword-spacing": "error",
            "@stylistic/no-extra-semi": "error",
            "@stylistic/no-floating-decimal": "error",
            "@stylistic/no-mixed-operators": "error",
            "@stylistic/no-mixed-spaces-and-tabs": "error",
            "@stylistic/no-multi-spaces": "error",
            "@stylistic/no-multiple-empty-lines": ["error", { max: 1, maxEOF: 1 }],
            "@stylistic/no-trailing-spaces": "error",
            "@stylistic/no-whitespace-before-property": "error",
            "@stylistic/object-curly-spacing": ["error", "always"],
            "@stylistic/quotes": ["error", "double", { avoidEscape: true, allowTemplateLiterals: "avoidEscape", }],
            "@stylistic/semi": ["error", "always"],
            "@stylistic/semi-spacing": "error",
            "@stylistic/semi-style": ["error", "last"],
            "@stylistic/space-in-parens": ["error", "never"],
            "@stylistic/type-annotation-spacing": "error",
            "array-callback-return": "error",
            "block-scoped-var": "error",
            "curly": "error",
            "eqeqeq": "error",
            "func-style": ["error", "expression", { allowArrowFunctions: true }],
            "no-alert": "warn",
            "no-await-in-loop": "warn",
            "no-console": "off",
            "no-constant-binary-expression": "warn",
            "no-constructor-return": "error",
            "no-div-regex": "warn",
            "no-duplicate-imports": "warn",
            "no-else-return": ["error", { allowElseIf: false }],
            "no-multi-assign": "error",
            "no-negated-condition": "warn",
            "no-promise-executor-return": "warn",
            "no-self-compare": "warn",
            "no-shadow": "error",
            "no-template-curly-in-string": "warn",
            "no-throw-literal": "error",
            "no-undef": "off",
            "no-unmodified-loop-condition": "warn",
            "no-unneeded-ternary": "error",
            "no-unreachable-loop": "warn",
            "no-unused-expressions": ["warn", { allowShortCircuit: true, allowTernary: true }],
            "no-unused-vars": "off",
            "no-use-before-define": "error",
            "no-useless-concat": "error",
            "no-useless-constructor": "warn",
            "no-var": "error",
            "no-warning-comments": "warn",
            "one-var": ["error", "never"],
            "prefer-arrow-callback": "error",
            "prefer-const": "off",
            "prefer-numeric-literals": "warn",
            "prefer-template": "error",
            "require-await": "warn",
            "space-before-blocks": "error",
        },
    },
];
