name: "üì£ Build Undertale Save Editor"

on:
  workflow_dispatch:

env:
  APP_NAME: "UndertaleSaveEditor"
  QT_VERSION: '6.7'
  QT_INSTALL: '6.7.1'
  OPENSSL_VERSION: '3.0'

jobs:
  build_linux:
    runs-on: ubuntu-latest
    name: "üêß Build Linux AppImage"
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
      - name: "üß∞ Install dependencies"
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build fuse3 libfuse2 libssl-dev libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libgstreamer-gl1.0-0 libinput-dev libx11-dev libx11-xcb-dev libxcb-cursor-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-sync-dev libxcb-util-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-xkb-dev libxcb1-dev libxext-dev libxfixes-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libxrender-dev
      - name: "‚öôÔ∏è Install Qt ${{ env.QT_INSTALL }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_INSTALL }}
          archives: "qtbase icu"
          cache: true
      - name: "üõ†Ô∏è Compile application"
        run: |
          qt-cmake -G Ninja -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel
      - name: "üß∞ Install linuxdeploy"
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-*.AppImage
      - name: "üì¶ Create AppImage"
        run: NO_STRIP=true ./linuxdeploy-x86_64.AppImage --appdir AppDir --executable "build/${{ env.APP_NAME }}" --icon-file "images/${{ env.APP_NAME }}.png" --desktop-file "${{ env.APP_NAME }}.desktop" --plugin qt --output appimage
      - name: "üì§ Upload artifact: Linux"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-x86_64.AppImage"
          path: "${{ env.APP_NAME }}-x86_64.AppImage"
  build_windows:
    runs-on: windows-latest
    name: "ü™ü Build Windows Executable"
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
      - name: "üß∞ Install dependencies: VS Shell"
        uses: egor-tensin/vs-shell@v2
      - name: "üß∞ Install dependencies: NASM"
        uses: ilammy/setup-nasm@v1
      - name: "üß∞ Cache OpenSSL ${{ env.OPENSSL_VERSION }}"
        id: cache-openssl
        uses: actions/cache@v4
        with:
          key: "${{ runner.os }}-opensslcache-${{ env.OPENSSL_VERSION }}"
          path: "${{ runner.temp }}/openssl-${{ env.OPENSSL_VERSION }}"
      - name: "üß∞ Cache Qt"
        id: cache-qt
        uses: actions/cache@v4
        with:
          key: "${{ runner.os }}-qtcache-${{ env.QT_VERSION }}"
          path: "${{ runner.temp }}/qt-static"
      - if: ${{ steps.cache-openssl.outputs.cache-hit != 'true' }}
        name: "‚öôÔ∏è Build OpenSSL ${{ env.OPENSSL_VERSION }}"
        working-directory: ${{ runner.temp }}
        run: |
          git clone --depth=1 --branch=openssl-${{ env.OPENSSL_VERSION }} https://github.com/openssl/openssl.git
          cd openssl
          perl Configure VC-WIN64A -no-shared -static --prefix="${{ runner.temp }}/openssl-${{ env.OPENSSL_VERSION }}"
          nmake
          nmake install_sw
      - if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        name: "‚öôÔ∏è Build static Qt ${{ env.QT_VERSION }}"
        working-directory: ${{ runner.temp }}
        run: |
          git clone --depth=1 --branch=${{ env.QT_VERSION }} https://github.com/qt/qtbase.git
          cd qtbase
          ./configure -release -static -static-runtime -openssl-linked -no-shared -platform win32-msvc -no-pch -qt-pcre -ltcg -qt-zlib -qt-freetype -qt-harfbuzz -qt-libpng -qt-libjpeg -c++std c++2b -nomake examples -nomake tests -prefix ${{ runner.temp }}/qt-static -disable-deprecated-up-to 0x060700 -- -DOPENSSL_USE_STATIC_LIBS=ON -DOPENSSL_ROOT_DIR="${{ runner.temp }}/openssl-${{ env.OPENSSL_VERSION }}"
          cmake --build . --parallel
          cmake --install .
      - name: "üõ†Ô∏è Compile application"
        run: |
          ${{ runner.temp }}/qt-static/bin/qt-cmake -G Ninja -S . -B build -DCMAKE_BUILD_TYPE=Release -DOPENSSL_USE_STATIC_LIBS=ON -DOPENSSL_ROOT_DIR="${{ runner.temp }}/openssl-${{ env.OPENSSL_VERSION }}"
          cmake --build build --parallel
      - name: "üì§ Upload artifact: Windows"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}.exe"
          path: "build/${{ env.APP_NAME }}.exe"
  build_macos:
    runs-on: macos-latest
    name: "üçé Build macOS DMG"
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
      - name: "‚öôÔ∏è Install Qt ${{ env.QT_INSTALL }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_INSTALL }}
          archives: "qtbase"
          cache: true
      - name: "üõ†Ô∏è Compile application"
        run: |
          qt-cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel
          macdeployqt "build/${{ env.APP_NAME }}.app" -dmg
      - name: "üì§ Upload artifact: macOS"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}.dmg"
          path: "build/${{ env.APP_NAME }}.dmg"
  create_release:
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_macos]
    name: "üóÉÔ∏è Prepare a draft release"
    permissions:
      contents: write
    steps:
      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: "üóÉÔ∏è Create draft release"
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: artifacts/*/*
